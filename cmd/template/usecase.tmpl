package usecase

import (
	"context"
	"time"
	"{{ .Name }}"
)

type {{ .JSONName }}Usecase struct {
	{{ .JSONName }}Repo    domain.{{ .Name }}Repository
	contextTimeout time.Duration
}

func (a *{{ .JSONName }}Usecase) Fetch(c context.Context, cursor string, num int64) (res []domain.{ .Name }}, nextCursor string, err error) {
	if num == 0 {
		num = 10
	}

	ctx, cancel := context.WithTimeout(c, a.contextTimeout)
	defer cancel()

	res, nextCursor, err = a.{{ .JSONName }}Repo.Fetch(ctx, cursor, num)
	if err != nil {
		return nil, "", err
	}
	return
}

func (a *{{ .JSONName }}Usecase) GetByID(c context.Context, id int64) (res domain.{{ .Name }}, err error) {
	ctx, cancel := context.WithTimeout(c, a.contextTimeout)
	defer cancel()

	res, err = a.{{ .JSONName }}Repo.GetByID(ctx, id)
	if err != nil {
		return
	}
	return
}

func (a *{{ .JSONName }}Usecase) Update(c context.Context, ar *domain.{{ .Name }}) (err error) {
	ctx, cancel := context.WithTimeout(c, a.contextTimeout)
	defer cancel()

	ar.UpdatedAt = time.Now()
	return a.{{ .JSONName }}Repo.Update(ctx, ar)
}

func (a *{{ .JSONName }}Usecase) Store(c context.Context, m *domain.{{ .Name }}) (err error) {
	ctx, cancel := context.WithTimeout(c, a.contextTimeout)
	defer cancel()
	err = a.{{ .JSONName }}Repo.Store(ctx, m)
	return
}

func (a *{{ .JSONName }}Usecase) Delete(c context.Context, id int64) (err error) {
	ctx, cancel := context.WithTimeout(c, a.contextTimeout)
	defer cancel()
	existing, err := a.{{ .JSONName }}Repo.GetByID(ctx, id)
	if err != nil {
		return
	}
	if existing == (domain.{{ .Name }}{}) {
		return domain.ErrNotFound
	}
	return a.{{ .JSONName }}Repo.Delete(ctx, id)
}